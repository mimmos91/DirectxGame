#include "pch.h"
#include "CommandQueue.h"
#include "SwapChain.h"
#include "Engine.h"

CommandQueue::~CommandQueue()
{
	::CloseHandle(_fenceEvent); //이벤트 활용 후 끝내야 됨. 뭐 안한다고 해도 상관은 없음
}

void CommandQueue::Init(ComPtr<ID3D12Device> device, shared_ptr<SwapChain> swapChain)
{
	_swapChain = swapChain;
	//_descHeap = descHeap;

	D3D12_COMMAND_QUEUE_DESC queueDesc = {};
	queueDesc.Type = D3D12_COMMAND_LIST_TYPE_DIRECT;
	queueDesc.Flags = D3D12_COMMAND_QUEUE_FLAG_NONE;

	/*CreateCommandQueue(
	 D3D12_COMMAND_QUEUE_DESC		*pDesc,				:
     REFIID													riid,						: 생성하고자 하는 명령목록에 해당하는 ID3D12CommendList 인터페이스 COMID
 	 void**													ppCommandList	: 생성된 명령 목록을 가리키는 포인터( 출력 매개변수)
	 )*/
	device->CreateCommandQueue(&queueDesc, IID_PPV_ARGS(&_cmdQueue));

	/*CreateCommandQueue(
	 D3D12_COMMAND_LIST_TYPE			type,							: 명령 목록 종류 DIRECT or BUNDLE
	 REFIID													riid,								: 생성하고자 하는 명령목록에 해당하는 ID3D12CommendList 인터페이스 COMID
	 void**													ppCommandAllocator	: 생성된 명령 할당자를 가리키는 포인터(출력매개변수)
	 )*/
	device->CreateCommandAllocator(D3D12_COMMAND_LIST_TYPE_DIRECT, IID_PPV_ARGS(&_cmdAlloc));


	/*CreateCommandList(
	 UINT												nodeMask,					:GPU가 하나인 시스테에서는 0으로
	 D3D12_COMMAND_LIST_TYPE		type,							: 명령 목록 종류 DIRECT or BUNDLE
	 ID3D12CommandAllocator*			pCommandAllocator,	: 생성된 명령 목록에 연관실킬 할당자 ALLOCATOR
	 ID3D12PipelineState*						pInitialState,				: 명령 목록의 초기 파이프라인 상태 지정(그리기명령 x nullptr)
	 REFIID												riid,								: 생성하고자 하는 명령목록에 해당하는 ID3D12CommendList 인터페이스 COMID
	 void**												ppCommandList			: 생성된 명령 목록을 가리키는 포인터( 출력 매개변수)
	)*/	
	device->CreateCommandList(0, D3D12_COMMAND_LIST_TYPE_DIRECT, _cmdAlloc.Get(), nullptr, IID_PPV_ARGS(&_cmdList));
	
	// CommandList는 Close / Open 상태가 있는데
	// Open 상태에서 Command를 넣다가 Close한 다음 제출하는 개념
	_cmdList->Close();

	//CreateFence
	//-CPU와 GPU 동기화 수단
	device->CreateFence(0, D3D12_FENCE_FLAG_NONE, IID_PPV_ARGS(&_fence));
	_fenceEvent = ::CreateEvent(nullptr, FALSE, FALSE, nullptr);

}

void CommandQueue::WaitSync()
{
	//멀티스레드 같은 거 동기화니까 cpu가 GPU 일할때까지 기다렸다가 다시 시작하는 것
	// 
	// Advance the fence value to mark commands up to this fence point.
	_fenceValue++;

	// Add an instruction to the command queue to set a new fence point.  Because we 
	// are on the GPU timeline, the new fence point won't be set until the GPU finishes
	// processing all the commands prior to this Signal().
	_cmdQueue->Signal(_fence.Get(), _fenceValue);

	// Wait until the GPU has completed commands up to this fence point.
	if (_fence->GetCompletedValue() < _fenceValue)
	{
		// Fire event when GPU hits current fence.  
		_fence->SetEventOnCompletion(_fenceValue, _fenceEvent);

		// Wait until the GPU hits current fence event is fired.
		::WaitForSingleObject(_fenceEvent, INFINITE);
	}
}


void CommandQueue::RenderBegin(const D3D12_VIEWPORT* vp, const D3D12_RECT* rect)
{
	_cmdAlloc->Reset(); // 기존것 클리어
	_cmdList->Reset(_cmdAlloc.Get(), nullptr);

	D3D12_RESOURCE_BARRIER barrier = CD3DX12_RESOURCE_BARRIER::Transition(
		_swapChain->GetBackRTVBuffer().Get(),
		D3D12_RESOURCE_STATE_PRESENT, // 화면 출력
		D3D12_RESOURCE_STATE_RENDER_TARGET); // 외주 결과물

	_cmdList->SetGraphicsRootSignature(ROOT_SIGNATURE.Get());
	GEngine->GetConstantBuffer()->Clear();
	GEngine->GetTableDescHeap()->Clear();

	ID3D12DescriptorHeap* descHeap = GEngine->GetTableDescHeap()->GetDescriptorHeap().Get();
	_cmdList->SetDescriptorHeaps(1, &descHeap);


	_cmdList->ResourceBarrier(1, &barrier);

	// Set the viewport and scissor rect.  This needs to be reset whenever the command list is reset.
	_cmdList->RSSetViewports(1, vp);
	_cmdList->RSSetScissorRects(1, rect);

	// Specify the buffers we are going to render to.
	D3D12_CPU_DESCRIPTOR_HANDLE backBufferView = _swapChain->GetBackRTV();
	_cmdList->ClearRenderTargetView(backBufferView, Colors::LightSteelBlue, 0, nullptr);
	_cmdList->OMSetRenderTargets(1, &backBufferView, FALSE, nullptr);
}

void CommandQueue::RenderEnd()
{
	D3D12_RESOURCE_BARRIER barrier = CD3DX12_RESOURCE_BARRIER::Transition(
		_swapChain->GetBackRTVBuffer().Get(),
		D3D12_RESOURCE_STATE_RENDER_TARGET, // 외주 결과물
		D3D12_RESOURCE_STATE_PRESENT); // 화면 출력 -> 뒤에있는 걸 앞으로 옮김 즉 swap.

	_cmdList->ResourceBarrier(1, &barrier);
	_cmdList->Close();

	// 커맨드 리스트 수행
	ID3D12CommandList* cmdListArr[] = { _cmdList.Get() };
	_cmdQueue->ExecuteCommandLists(_countof(cmdListArr), cmdListArr);

	_swapChain->Present();

	// Wait until frame commands are complete.  This waiting is inefficient and is
	// done for simplicity.  Later we will show how to organize our rendering code
	// so we do not have to wait per frame.
	WaitSync();

	_swapChain->SwapIndex();
}
